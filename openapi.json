{
  "openapi": "3.0.3",
  "info": {
    "title": "USER - ENTITY API",
    "description": "USER AND ENTITY CRUD",
    "contact": {
      "email": "jtolojanahary5@gmail.com"
    },
    "license": {
      "name": "Portfolio",
      "url": "https://j-lucien.github.io/portfolio-angular/"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Online CV",
    "url": "https://github.com/J-Lucien/RESUME/blob/main/CV-TOLOJANAHARY-JEAN-LUCIEN.pdf"
  },
  "tags": [
    {
      "name": "Entity",
      "description": "Operation pour l'entity"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "user-entities",
      "description": "Operations pour UserEntity"
    }
  ],
  "paths": {
    "/entities": {
      "post": {
        "tags": [
          "entities"
        ],
        "summary": "Create an entity",
        "description": "Create a new entity.",
        "operationId": "entityId",
        "requestBody": {
          "description": "Created entity object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EntityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EntityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "entities"
        ],
        "summary": "Get all entity",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/entities/{id}": {
      "put": {
        "tags": [
          "entities"
        ],
        "summary": "Update an existing entity",
        "description": "Update an existing entity by Id",
        "operationId": "updateEntity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EntityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EntityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityUpdateResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Id not found"
          }
        }
      },
      "get": {
        "tags": [
          "entities"
        ],
        "summary": "Get an entity",
        "description": "Get an entity by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of entity to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityResponse"
                }
              }
            }
          },
          "404": {
            "description": "Id not found"
          }
        }
      },
      "delete": {
        "tags": [
          "entities"
        ],
        "summary": "Delete entities",
        "operationId": "deleteEntity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity supprimé avec succès !"
          },
          "404": {
            "description": "id not found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "create an user",
        "description": "create a new user",
        "operationId": "userId",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Required attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all user",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update an existing user",
        "description": "Update an existing user by Id",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityUpdateResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Id not found"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get an user",
        "description": "Get an user by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Id not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete users",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User supprimé avec succès !"
          },
          "404": {
            "description": "id not found"
          }
        }
      }
    },
    "/user-entities": {
      "post": {
        "tags": [
          "user-entities"
        ],
        "summary": "create an user-entities",
        "operationId": "userEntityId",
        "requestBody": {
          "description": "Created user-entity object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEntityRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserEntityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserEntityRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "user-entities"
        ],
        "summary": "Get all user-entities",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntityResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user-entities/{id}": {
      "put": {
        "tags": [
          "user-entities"
        ],
        "summary": "Update an existing user-entities",
        "description": "Update an existing user-entities by Id",
        "operationId": "updateUserEntity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user-entities",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEntityRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserEntityRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserEntityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "404": {
            "description": "Id not found"
          }
        }
      },
      "get": {
        "tags": [
          "user-entities"
        ],
        "summary": "Get an user-entities",
        "description": "Get an user-entities by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user-entities to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntityResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntityResponse"
                }
              }
            }
          },
          "404": {
            "description": "Id not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user-entities"
        ],
        "summary": "Delete user-entities",
        "operationId": "deleteUserEntity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user-entities supprimé avec succès !"
          },
          "404": {
            "description": "id not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Nom de l'entité",
            "maxLength": 50,
            "minLength": 1,
            "example": "My Entity"
          },
          "description": {
            "type": "string",
            "description": "Description détaillée de l'entité",
            "example": "This is a description of the entity."
          },
          "siret": {
            "type": "string",
            "description": "Numéro de SIRET de l'entité",
            "maxLength": 20,
            "example": "12345678901234"
          },
          "keyLicence": {
            "type": "string",
            "description": "Clé de licence associée à l'entité",
            "maxLength": 250,
            "example": "ABCD-1234-XYZ"
          },
          "website": {
            "type": "string",
            "description": "Site web de l'entité",
            "maxLength": 100,
            "example": "https://www.entitywebsite.com"
          }
        }
      },
      "EntityRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Nom de l'entité",
            "maxLength": 50,
            "minLength": 1,
            "example": "My Entity"
          },
          "description": {
            "type": "string",
            "description": "Description détaillée de l'entité",
            "example": "This is a description of the entity."
          },
          "siret": {
            "type": "string",
            "description": "Numéro de SIRET de l'entité",
            "maxLength": 20,
            "example": "12345678901234"
          },
          "keyLicence": {
            "type": "string",
            "description": "Clé de licence associée à l'entité",
            "maxLength": 250,
            "example": "ABCD-1234-XYZ"
          },
          "website": {
            "type": "string",
            "description": "Site web de l'entité",
            "maxLength": 100,
            "example": "https://www.entitywebsite.com"
          }
        }
      },
      "EntityUpdateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Nom de l'entité",
            "maxLength": 50,
            "minLength": 1,
            "example": "My Entity"
          },
          "description": {
            "type": "string",
            "description": "Description détaillée de l'entité",
            "example": "This is a description of the entity."
          },
          "siret": {
            "type": "string",
            "description": "Numéro de SIRET de l'entité",
            "maxLength": 20,
            "example": "12345678901234"
          },
          "keyLicence": {
            "type": "string",
            "description": "Clé de licence associée à l'entité",
            "maxLength": 250,
            "example": "ABCD-1234-XYZ"
          },
          "website": {
            "type": "string",
            "description": "Site web de l'entité",
            "maxLength": 100,
            "example": "https://www.entitywebsite.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date de création de l'entité",
            "example": "2024-11-10T12:34:56Z"
          }
        }
      },
      "EntityResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Nom de l'entité",
            "maxLength": 50,
            "minLength": 1,
            "example": "My Entity"
          },
          "description": {
            "type": "string",
            "description": "Description détaillée de l'entité",
            "example": "This is a description of the entity."
          },
          "siret": {
            "type": "string",
            "description": "Numéro de SIRET de l'entité",
            "maxLength": 20,
            "example": "12345678901234"
          },
          "keyLicence": {
            "type": "string",
            "description": "Clé de licence associée à l'entité",
            "maxLength": 250,
            "example": "ABCD-1234-XYZ"
          },
          "website": {
            "type": "string",
            "description": "Site web de l'entité",
            "maxLength": 100,
            "example": "https://www.entitywebsite.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date de création de l'entité",
            "example": "2024-11-10T12:34:56Z"
          },
          "Users": {
            "type": "array",
            "description": "Liste des utilisateurs associés à l'entité",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 3
                },
                "name": {
                  "type": "string",
                  "example": "Jean Lucien"
                },
                "firstName": {
                  "type": "string",
                  "example": "Lucien"
                },
                "language": {
                  "type": "string",
                  "example": "fr"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "lucien@gmail.com"
                },
                "lastLogin": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "example": null
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-11-10T10:51:41.000Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-11-10T10:51:41.000Z"
                }
              }
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 3
          },
          "name": {
            "type": "string",
            "example": "Jean Lucien"
          },
          "firstName": {
            "type": "string",
            "example": "Lucien"
          },
          "language": {
            "type": "string",
            "example": "fr"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "lucien@gmail.com"
          }
        }
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Jean Lucien"
          },
          "firstName": {
            "type": "string",
            "example": "Lucien"
          },
          "language": {
            "type": "string",
            "example": "fr"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "lucien@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "your password"
          }
        }
      },
      "UserUpdateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 3
          },
          "name": {
            "type": "string",
            "example": "Jean Lucien"
          },
          "firstName": {
            "type": "string",
            "example": "Lucien"
          },
          "language": {
            "type": "string",
            "example": "fr"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "lucien@gmail.com"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T10:51:41.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T10:51:41.000Z"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 3
          },
          "name": {
            "type": "string",
            "example": "Jean Lucien"
          },
          "firstName": {
            "type": "string",
            "example": "Lucien"
          },
          "language": {
            "type": "string",
            "example": "fr"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "lucien@gmail.com"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T10:51:41.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-10T10:51:41.000Z"
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityUpdateResponse"
            }
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "UserEntityRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "example": 3
          },
          "entityId": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "UserEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "userId": {
            "type": "integer",
            "example": 3
          },
          "entityId": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "UserEntityResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "userId": {
            "type": "integer",
            "example": 3
          },
          "entityId": {
            "type": "integer",
            "example": 1
          },
          "User": {
            "$ref": "#/components/schemas/User"
          },
          "Entity": {
            "$ref": "#/components/schemas/Entity"
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "description": "Liste des messages d'erreur pour chaque champ non valide",
            "items": {
              "type": "string",
              "example": "[name] doit contenir au moins 1 caractère et au maximum 80 caractères."
            }
          }
        },
        "example": {
          "errors": [
            "[name] doit contenir au moins 1 caractère et au maximum 80 caractères.",
            "[name] ne peut pas être vide."
          ]
        }
      }
    }
  }
}